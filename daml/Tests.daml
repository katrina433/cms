module Tests where

import Course
import Daml.Script

-- setup variables for testing
testSetup = script do
  prof <- allocateParty "Prof"
  alice <- allocateParty "Alice"
  bob <- allocateParty "Bob"

  let a0 = Assignment with aid = 0, content = "This is A0", submissions = [(alice, "hello"), (bob, "world")], grades = [(alice, 60), (bob, 80)]
  let a1 = Assignment with aid = 1, content = "This is A1", submissions = [(alice, ""), (bob, "")], grades = [(alice, 0), (bob, 0)]

  course <- submit prof do
    createCmd Course with
      title = "Daml 101"
      professor = prof
      students = [alice, bob]
      assignments = [a0, a1]

  return (prof, alice, bob, course)

-- Add a new student to the course
testAddStudent = script do
  (prof, alice, bob, course) <- testSetup
  charlie <- allocateParty "Charlie"
  
  submit prof do
    exerciseCmd course AddStudent with
      student = charlie

-- Add an existing student to a course must fail
testAddExistingStudent = script do
  (prof, alice, bob, course) <- testSetup

  submitMustFail prof do
    exerciseCmd course AddStudent with
      student = alice

-- Add professor as a student must fail
testAddProfAsStudent = script do
  (prof, alice, bob, course) <- testSetup

  submitMustFail prof do
    exerciseCmd course AddStudent with
      student = prof

-- Professor adds a new assignment
testCreateAssignment = script do
  (prof, alice, bob, course) <- testSetup

  submit prof do
    exerciseCmd course CreateAssignment with
      content = "This is A2"

-- Student adds a new assignment must fail
testStudentCreateAssignment = script do
  (prof, alice, bob, course) <- testSetup

  submitMustFail alice do
    exerciseCmd course CreateAssignment with
      content = "This is A2"

-- Alice submits her answer for assgnment with aid 1
testSubmitAssignment = script do
  (prof, alice, bob, course) <- testSetup
  
  submit alice do
    exerciseCmd course SubmitAssignment with
      aid = 1
      submission = "This is alice's answer for A1"
      student = alice

-- Professor submitting an assignment must fail
testProfSubmitAssignment = script do
  (prof, alice, bob, course) <- testSetup
  
  submitMustFail prof do
    exerciseCmd course SubmitAssignment with
      aid = 1
      submission = "This is prof writing"
      student = prof

-- Alice submitting an assignment for Bob must fail
testWrongStudentSubmitAssignment = script do
  (prof, alice, bob, course) <- testSetup
  
  submitMustFail alice do
    exerciseCmd course SubmitAssignment with
      aid = 1
      submission = "This is alice writing bob's homework"
      student = bob

-- A non student of the course submitting an assignment must fail
testNonStudentSubmitAssignment = script do
  (prof, alice, bob, course) <- testSetup
  charlie <- allocateParty "Charlie"
  
  submitMustFail charlie do
    exerciseCmd course SubmitAssignment with
      aid = 1
      submission = "This is charlie from next door"
      student = charlie

-- Submitting for a non existing assignment must fail
testSubmitNonExistingAssignment = script do
  (prof, alice, bob, course) <- testSetup
  
  submitMustFail alice do
    exerciseCmd course SubmitAssignment with
      aid = 100
      submission = "This is alice's answer for A100"
      student = alice

-- Professor assigns 100 to Alice for assignment with aid 1
testGradeAssignment = script do
  (prof, alice, bob, course) <- testSetup
  
  submit prof do
    exerciseCmd course GradeAssignment with
      aid = 1
      grade = 100
      student = alice

-- Alice grading herself must fail
testStudentGradeAssignment = script do
  (prof, alice, bob, course) <- testSetup
  
  submitMustFail alice do
    exerciseCmd course GradeAssignment with
      aid = 1
      grade = 100
      student = alice

-- Use professor as student must fail
testGradeProfAssignment = script do
  (prof, alice, bob, course) <- testSetup
  
  submitMustFail prof do
    exerciseCmd course GradeAssignment with
      aid = 1
      grade = 100
      student = prof

-- Grading a non student of the course must fail
testGradeNonStudentAssignment = script do
  (prof, alice, bob, course) <- testSetup
  charlie <- allocateParty "Charlie"
  
  submitMustFail prof do
    exerciseCmd course GradeAssignment with
      aid = 1
      grade = 100
      student = charlie

-- Grading a non existing assignment must fail
testGradeNonExistingAssignment = script do
  (prof, alice, bob, course) <- testSetup
  
  submitMustFail prof do
    exerciseCmd course GradeAssignment with
      aid = 100
      grade = 100
      student = alice
